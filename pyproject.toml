[build-system]
requires = ["poetry-core>=1.1.0,<2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pyshacl"
version = "0.20.0"
# Don't forget to change the version number in __init__.py, Dockerfile, and CITATION.cff along with this one
description = "Python SHACL Validator"
license = "Apache-2.0"
authors = [
    "Ashley Sommer <Ashley.Sommer@csiro.au>"
]
readme = "README.md"
repository = "https://github.com/RDFLib/pySHACL"
homepage = "https://github.com/RDFLib/pySHACL"
keywords = ["Linked Data", "Semantic Web", "RDF", "Python", "SHACL", "Shapes", "Schema", "Validate"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Utilities",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent"
]
packages = [
    { include = "pyshacl" },
    { include = "examples", format = "sdist" },
    { include = "benchmarks", format = "sdist" },
    { include = "test", format = "sdist" }
]

include = [
    { path = "pyshacl/assets/*.ttl", format = "sdist" },
    { path = "pyshacl/assets/*.py", format = "sdist" },
    { path = "hooks/*", format = "sdist" },
    { path = "MANIFEST.in", format = "sdist" },
    { path = "pyproject.toml", format = "sdist" },
    { path = "poetry.lock", format = "sdist" },
    { path = "Makefile", format = "sdist" },
    { path = "*.md" },
    { path = "*.txt" },
    { path = "pyshacl/assets/*.pickle" },
    { path = "pyshacl/*.spec" }
]

[tool.poetry.dependencies]
python = "^3.7.0"  # Compatible python versions must be declared here
rdflib = ">=6.2.0,<7"
html5lib = ">=1.1,<2"
owlrl = ">=6.0.2,<7"
prettytable = "^2.2.1"
packaging = ">=21.3"
rdflib-jsonld = { version=">=0.4.0,<0.6", optional=true}
pyduktape2 = {version="^0.4.1", optional=true}
flake8 = {version="^5.0.4", optional=true}
isort = {version="^5.10.1", optional=true}
black = {version="22.8.0", optional=true}
mypy = {version="^0.800", optional=true}
types-setuptools = {version="*", optional=true}
platformdirs = {version="*", optional=true}
coverage = {version=">6,<7,!=6.0.*,!=6.1,!=6.1.1", optional=true}
pytest-cov = {version="^2.8.1", optional=true}

[tool.poetry.dev-dependencies]
pytest = "^6.0"
coverage = {version=">6,<7,!=6.0.*,!=6.1,!=6.1.1", optional=true}
pytest-cov = {version="^2.8.1", optional=true}
flake8 = {version="^5.0.4", optional=true}
isort = {version="^5.10.1", optional=true}
black = {version="22.8.0", optional=true}
mypy = {version="^0.800", optional=true}
types-setuptools = {version="*", optional=true}
platformdirs = {version="*", optional=true}

[tool.poetry.extras]
jsonld = ["rdflib-jsonld"]
js = ["pyduktape2"]
dev-lint = ["isort", "black", "flake8", "platformdirs"]
dev-type-checking = ["mypy", "types-setuptools", "platformdirs"]
dev-coverage = ["pytest-cov", "coverage", "platformdirs"]


[tool.poetry.scripts]
pyshacl = "pyshacl.cli:main"

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "setuppy", path = "setup.py"}

[tool.black]
required-version = "22.8.0"
line-length = "119"
skip-string-normalization = true
target-version = ['py37']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.tox
    | \.venv
    | _build
    | htmlcov
    | benchmarks
    | examples
    | pyshacl.egg-info
    | buck-out
    | build
    | dist
    | venv
  )/
)
'''

[tool.isort]
atomic = true
default_section = "THIRDPARTY"
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = "pyshacl"
known_third_party = ["pytest"]
line_length = 119
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "test",
]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
skipsdist = true
envlist = py37, py38, py39, py310, lint, type-checking
toxworkdir={env:TOX_WORK_DIR:.tox}

[testenv]
deps =
    poetry>=1.2.0
passenv = TRAVIS TRAVIS_JOB_ID TRAVIS_BRANCH TRAVIS_BUILD_DIR DRONE_BUILD_NUMBER DRONE_STAGE_NAME DRONE_STAGE_KIND DRONE_REPO_NAME DRONE_SOURCE_BRANCH COVERALLS_SERVICE_NAME COVERALLS_REPO_TOKEN DRONE_COMMIT_AUTHOR_NAME DRONE_COMMIT_AUTHOR_EMAIL DRONE_COMMIT HAS_COVERALLS
skip_install = true
allowlist_externals = python3, ls, pwd, env, poetry
setenv =
    COVERALLS_SERVICE_NUMBER ={env:DRONE_BUILD_NUMBER:0}
    COVERALLS_SERVICE_JOB_ID = {env:DRONE_STAGE_NAME:stage}
    COVERALLS_SERVICE_JOB_NUMBER = {env:DRONE_BUILD_NUMBER:0}
    COVERALLS_FLAG_NAME = {env:DRONE_STAGE_KIND:build}
    COVERALLS_GIT_REPO = {env:DRONE_REPO_NAME:RDFLib/pySHACL}
    COVERALLS_GIT_BRANCH = {env:DRONE_SOURCE_BRANCH:master}
    CI_BRANCH = {env:DRONE_SOURCE_BRANCH:master}
    GIT_BRANCH = {env:DRONE_SOURCE_BRANCH:master}
    GIT_AUTHOR_NAME = {env:DRONE_COMMIT_AUTHOR_NAME:nobody}
    GIT_AUTHOR_EMAIL = {env:DRONE_COMMIT_AUTHOR_EMAIL:nobody@example.com}
    GIT_ID = {env:DRONE_COMMIT:0}

commands_pre =
    py39: poetry run pip3 install -U "pip>=21.0"
    py310: poetry run pip3 install -U "pip>=21.3"
    poetry install -vv -n --no-root --extras "js dev-coverage"
    # Coveralls required to send coverage report to coveralls.io
    py38: poetry run pip3 install "coveralls>=3.3.1"

commands =
    - poetry show
    poetry run pytest --cov=pyshacl test/
    - poetry run coverage combine --append
    poetry run coverage report -m
    poetry run coverage html -i
    py38: - coveralls

[testenv:lint]
commands_pre =
    python --version
    poetry install -vv -n --no-root --extras "dev-lint"
commands =
    - poetry show
    poetry run flake8 pyshacl
    poetry run isort --check-only pyshacl
    poetry run black --check --verbose --config ./pyproject.toml pyshacl

[testenv:type-checking]
commands_pre =
    python --version
    poetry install -vv -n --no-root --extras "dev-type-checking"
    poetry run pip3 install "mypy>=0.800" "types-setuptools"
commands =
    - poetry show
    poetry run python3 -m mypy --ignore-missing-imports pyshacl

"""
